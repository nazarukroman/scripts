#!/bin/bash

# ====== –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è ======
REPO_ROOT=$(git rev-parse --show-toplevel)
PRE_PUSH_SCRIPT="$REPO_ROOT/.husky/pre-push"

# ====== –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ–¥—ã ======
RESET="\033[0m"
RED="\033[0;31m"
GREEN="\033[0;32m"
YELLOW="\033[0;33m"

# ====== –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ======
log_success() {
  echo -e "${GREEN}[TEST SUCCESS]${RESET} $1"
}

log_failure() {
  echo -e "${RED}[TEST FAILED]${RESET} $1"
}

# ====== –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ======
echo "üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è pre-push..."

# ====== –¢–µ—Å—Ç 1: –°–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫ ======
if [ ! -f "$PRE_PUSH_SCRIPT" ]; then
  log_failure "–¢–µ—Å—Ç 1: –§–∞–π–ª pre-push –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .husky/"
  exit 1
fi

chmod +x "$PRE_PUSH_SCRIPT"  # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π
"$PRE_PUSH_SCRIPT" > output.log 2>&1
EXIT_CODE=$?

if [ "$EXIT_CODE" -eq 0 ]; then
  log_success "–¢–µ—Å—Ç 1: –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫"
else
  log_failure "–¢–µ—Å—Ç 1: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞ (–∫–æ–¥ $EXIT_CODE)"
  exit 1
fi

# ====== –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ======
git diff --name-only origin/master..HEAD > /dev/null 2>&1
if [ ! -eq 0 ]; then
  grep -q "‚úÖ –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–∞—Ö" output.log
  if [ ! -eq 0 ]; then
    log_success "–¢–µ—Å—Ç 2: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
  else
    log_failure "–¢–µ—Å—Ç 2: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"
    exit 1
  fi
else
  log_success "–¢–µ—Å—Ç 2: –ü—Ä–æ–ø—É—â–µ–Ω (–µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git)"
fi

# ====== –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è package.json ======
mv "$REPO_ROOT/package.json" "$REPO_ROOT/package.json.bak"
"$PRE_PUSH_SCRIPT" > output.log 2>&1
grep -q "–§–∞–π–ª package.json –Ω–µ –Ω–∞–π–¥–µ–Ω!" output.log
if [ $? -ne 1 ]; then
  log_success "–¢–µ—Å—Ç 3: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è package.json"
else
  log_failure "–¢–µ—Å—Ç 3: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è package.json"
  mv "$REPO_ROOT/package.json.bak" "$REPO_ROOT/package.json"
  exit 1
fi
mv "$REPO_ROOT/package.json.bak" "$REPO_ROOT/package.json"

# ====== –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—É—Å–∫ pre-push –≤ workspace ======
mkdir "$REPO_ROOT/apps/a"
touch "$REPO_ROOT/apps/a/file1.js"
git add "$REPO_ROOT/apps/a/file1.js"
git commit -m 'Test pre-push' --no-verify
"$PRE_PUSH_SCRIPT" > output.log 2>&1
grep -q "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º pre-push –¥–ª—è" output.log
if [ $? -ne 1 ]; then
  log_success "–¢–µ—Å—Ç 4: pre-push —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–ª—è workspaces"
else
  log_failure "–¢–µ—Å—Ç 4: –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ pre-push –≤ workspaces"

  git reset HEAD~1
  rm -rf "$REPO_ROOT/apps/a"

  exit 1
fi
git reset HEAD~1
rm -rf "$REPO_ROOT/apps/a"

# ====== –ò—Ç–æ–≥ ======
echo "üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
exit 0
